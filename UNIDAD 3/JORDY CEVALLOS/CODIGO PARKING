/*UNIVERSIDAD DE LAS FUERZAS ARMADAS
            ESPE       
PROYECTO DE FUNDAMENTOS DE PROGRAMACION
INTEGRANTES: JORDY CEVALLOS, ANA ULLOA, BRYAN MIGUITAMA
        PARQUEADERO AUTOMATIZADO*/

#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Estructura que representa un vehiculo
typedef struct {
    char placa[20];
    char marca[30];
    char color[20];
    char horaEntrada[10];
    char horaSalida[10];
    float precioPagado;
} Vehiculo;

void convertirMayusculas(char *str) {
    for (int i = 0; str[i]; i++) {
        str[i] = toupper((unsigned char)str[i]);
    }
}

// Validar que la placa contenga solo letras y números
int validarPlaca(const char *placa) {
    for (int i = 0; placa[i] != '\0'; i++) {
        if (!isalnum((unsigned char)placa[i])) {
            return 0;
        }
    }
    return 1;
}

// Validar que marca y color solo contengan letras y espacios
int validarTextoSoloLetras(const char *texto) {
    for (int i = 0; texto[i] != '\0'; i++) {
        if (!isalpha((unsigned char)texto[i]) && texto[i] != ' ') {
            return 0;
        }
    }
    return 1;
}

// Validar que la hora esté en formato HH:MM y solo números
int validarHora(const char *hora) {
    int h, m;
    if (sscanf(hora, "%d:%d", &h, &m) != 2)
        return 0;
    if (h < 0 || h > 23 || m < 0 || m > 59)
        return 0;
    return 1;
}

int buscarPorPlaca(Vehiculo lista[], int n, char placa[]) {
    for (int i = 0; i < n; i++) {
        if (strcmp(lista[i].placa, placa) == 0) {
            return i;
        }
    }
    return -1;
}

int convertirHoraAMinutos(const char *hora) {
    int h, m;
    sscanf(hora, "%d:%d", &h, &m);
    return h * 60 + m;
}

float calcularPrecio(char *entrada, char *salida) {
    int minutosEntrada = convertirHoraAMinutos(entrada);
    int minutosSalida = convertirHoraAMinutos(salida);
    int duracion = minutosSalida - minutosEntrada;

    if (duracion <= 15) return 0.0;
    if (duracion < 60) return 0.50;

    int horasCompletas = duracion / 60;
    int minutosRestantes = duracion % 60;
    float precio = horasCompletas * 0.75;

    if (minutosRestantes >= 30) {
        precio += 0.50;
    }

    return precio;
}

void mostrarVehiculo(Vehiculo v) {
    printf("\nPlaca: %s\n", v.placa);
    printf("Marca: %s\n", v.marca);
    printf("Color: %s\n", v.color);
    printf("Hora de entrada: %s\n", v.horaEntrada);
    if (strlen(v.horaSalida) > 0) {
        printf("Hora de salida: %s\n", v.horaSalida);
        printf("Precio pagado: $%.2f\n", v.precioPagado);
    } else {
        printf("Hora de salida: (Aun en parqueadero)\n");
    }
}

void registrarEntrada(Vehiculo parqueadero[], int *cantidad, int *puestosDisponibles) {
    if (*puestosDisponibles <= 0) {
        printf("Parqueadero lleno.\n");
        return;
    }

    Vehiculo nuevo;

    printf("Ingrese la placa del vehiculo: ");
    fgets(nuevo.placa, 20, stdin);
    nuevo.placa[strcspn(nuevo.placa, "\n")] = '\0';
    convertirMayusculas(nuevo.placa);
    if (!validarPlaca(nuevo.placa)) {
        printf("Error: La placa contiene caracteres inválidos.\n");
        return;
    }

    printf("Ingrese la marca del vehiculo: ");
    fgets(nuevo.marca, 30, stdin);
    nuevo.marca[strcspn(nuevo.marca, "\n")] = '\0';
    if (!validarTextoSoloLetras(nuevo.marca)) {
        printf("Error: La marca solo debe contener letras.\n");
        return;
    }

    printf("Ingrese el color del vehiculo: ");
    fgets(nuevo.color, 20, stdin);
    nuevo.color[strcspn(nuevo.color, "\n")] = '\0';
    if (!validarTextoSoloLetras(nuevo.color)) {
        printf("Error: El color solo debe contener letras.\n");
        return;
    }

    for (int i = 0; i < *cantidad; i++) {
        if (strcmp(parqueadero[i].placa, nuevo.placa) == 0 && strlen(parqueadero[i].horaSalida) == 0) {
            printf("El vehiculo ya está registrado sin salida.\n");
            return;
        }
    }

    printf("Ingrese la hora de entrada (HH:MM): ");
    fgets(nuevo.horaEntrada, 10, stdin);
    nuevo.horaEntrada[strcspn(nuevo.horaEntrada, "\n")] = '\0';
    if (!validarHora(nuevo.horaEntrada)) {
        printf("Error: Formato de hora inválido. Use HH:MM.\n");
        return;
    }

    strcpy(nuevo.horaSalida, "");
    nuevo.precioPagado = 0.0;

    parqueadero[*cantidad] = nuevo;
    (*cantidad)++;
    (*puestosDisponibles)--;

    printf("Vehiculo registrado correctamente.\n");
}

void registrarSalida(Vehiculo parqueadero[], int *puestosDisponibles, int cantidad) {
    char placa[20];
    printf("Ingrese la placa: ");
    fgets(placa, 20, stdin);
    placa[strcspn(placa, "\n")] = '\0';
    convertirMayusculas(placa);

    int pos = buscarPorPlaca(parqueadero, cantidad, placa);
    if (pos == -1) {
        printf("Vehiculo no encontrado.\n");
        return;
    }

    if (strlen(parqueadero[pos].horaSalida) != 0) {
        printf("La salida ya fue registrada.\n");
        return;
    }

    printf("Ingrese la hora de salida (HH:MM): ");
    fgets(parqueadero[pos].horaSalida, 10, stdin);
    parqueadero[pos].horaSalida[strcspn(parqueadero[pos].horaSalida, "\n")] = '\0';
    if (!validarHora(parqueadero[pos].horaSalida)) {
        printf("Error: Formato de hora inválido. Use HH:MM.\n");
        return;
    }

    parqueadero[pos].precioPagado = calcularPrecio(parqueadero[pos].horaEntrada, parqueadero[pos].horaSalida);

    printf("Duracion: %s - %s\n", parqueadero[pos].horaEntrada, parqueadero[pos].horaSalida);
    printf("Precio a pagar: $%.2f\n", parqueadero[pos].precioPagado);

    (*puestosDisponibles)++;
}

void modificarVehiculo(Vehiculo parqueadero[], int cantidad) {
    char placa[20];
    printf("Ingrese la placa del vehiculo a modificar: ");
    fgets(placa, 20, stdin);
    placa[strcspn(placa, "\n")] = '\0';
    convertirMayusculas(placa);

    int pos = buscarPorPlaca(parqueadero, cantidad, placa);
    if (pos == -1) {
        printf("Vehiculo no encontrado.\n");
        return;
    }

    Vehiculo *v = &parqueadero[pos];

    printf("Nueva placa: ");
    fgets(v->placa, 20, stdin);
    v->placa[strcspn(v->placa, "\n")] = '\0';
    convertirMayusculas(v->placa);
    if (!validarPlaca(v->placa)) {
        printf("Error: Placa inválida.\n");
        return;
    }

    printf("Nueva marca: ");
    fgets(v->marca, 30, stdin);
    v->marca[strcspn(v->marca, "\n")] = '\0';
    if (!validarTextoSoloLetras(v->marca)) {
        printf("Error: Marca inválida.\n");
        return;
    }

    printf("Nuevo color: ");
    fgets(v->color, 20, stdin);
    v->color[strcspn(v->color, "\n")] = '\0';
    if (!validarTextoSoloLetras(v->color)) {
        printf("Error: Color inválido.\n");
        return;
    }

    printf("Nueva hora de entrada (HH:MM): ");
    fgets(v->horaEntrada, 10, stdin);
    v->horaEntrada[strcspn(v->horaEntrada, "\n")] = '\0';
    if (!validarHora(v->horaEntrada)) {
       
        printf("Error: Formato de hora de entrada inválido.\n");
        return;
    }

    printf("Nueva hora de salida (HH:MM o vacío si no ha salido): ");
    fgets(v->horaSalida, 10, stdin);
    v->horaSalida[strcspn(v->horaSalida, "\n")] = '\0';

    if (strlen(v->horaSalida) > 0) {
        if (!validarHora(v->horaSalida)) {
            printf("Error: Formato de hora de salida inválido.\n");
            return;
        }
        v->precioPagado = calcularPrecio(v->horaEntrada, v->horaSalida);
        printf("Nuevo precio calculado: $%.2f\n", v->precioPagado);
    } else {
        v->precioPagado = 0.0;
    }

    printf("Datos modificados correctamente.\n");
}

void finalizarDia(Vehiculo parqueadero[], int cantidad) {
    float total = 0.0;
    printf("\n--- Cierre del Dia ---\n");

    for (int i = 0; i < cantidad; i++) {
        if (parqueadero[i].precioPagado > 0) {
            printf("Placa: %s - Pago: $%.2f\n", parqueadero[i].placa, parqueadero[i].precioPagado);
            total += parqueadero[i].precioPagado;
        }
    }

    printf("Total recaudado: $%.2f\n", total);
}

int main() {
    Vehiculo parqueadero[100];
    int cantidad = 0;
    int puestosDisponibles = 60;
    int opcion;

    while (1) {
        printf("\n--- SISTEMA DE PARQUEADERO ---\n");
        printf("Puestos disponibles: %d / 60\n", puestosDisponibles);
        printf("1. Ingresar vehiculo\n");
        printf("2. Registrar salida\n");
        printf("3. Modificar datos vehiculo\n");
        printf("4. Mostrar vehiculos\n");
        printf("5. Finalizar dia\n");
        printf("6. Salir\n");
        printf("Opcion: ");
        scanf("%d", &opcion);
        getchar(); // limpiar buffer

        if (opcion == 1) {
            registrarEntrada(parqueadero, &cantidad, &puestosDisponibles);
        } else if (opcion == 2) {
            registrarSalida(parqueadero, &puestosDisponibles, cantidad);
        } else if (opcion == 3) {
            modificarVehiculo(parqueadero, cantidad);
        } else if (opcion == 4) {
            for (int i = 0; i < cantidad; i++) {
                mostrarVehiculo(parqueadero[i]);
            }
        } else if (opcion == 5) {
            finalizarDia(parqueadero, cantidad);
        } else if (opcion == 6) {
            printf("Saliendo del sistema...\n");
            break;
        } else {
            printf("Opcion invalida.\n");
        }
    }

    return 0;
}

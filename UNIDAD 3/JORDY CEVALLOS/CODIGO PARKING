/*UNIVERSIDAD DE LAS FUERZAS ARMADAS
            ESPE       
PROYECTO DE FUNDAMENTOS DE PROGRAMACION
INTEGRANTES: JORDY CEVALLOS, ANA ULLOA, BRYAN MIGUITAMA
        PARQUEADERO AUTOMATIZADO*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#ifdef _WIN32
    #include <direct.h>
    #define mkdir(path, mode) _mkdir(path)
#else
    #include <sys/stat.h>
    #include <sys/types.h>
#endif

#define MAX_VEHICULOS 100

typedef struct {
    char placa[10];
    char marca[20];
    char color[15];
    char horaEntrada[6];
    char horaSalida[6];
    float precioPagado;
} Vehiculo;

// Función para convertir cadena a mayúsculas
void convertirAMayusculas(char *cadena) {
    for (int i = 0; cadena[i]; i++) {
        cadena[i] = toupper((unsigned char)cadena[i]);
    }
}

void crearDirectorioResumenes() {
    mkdir("resumenes", 0777); // Crear carpeta si no existe
}

int convertirHoraAMinutos(const char *hora) {
    int h, m;
    sscanf(hora, "%d:%d", &h, &m);
    return h * 60 + m;
}

float calcularPrecio(char *entrada, char *salida) {
    int minutosEntrada = convertirHoraAMinutos(entrada);
    int minutosSalida = convertirHoraAMinutos(salida);
    int duracion = minutosSalida - minutosEntrada;

    if (duracion <= 15) return 0.0;
    if (duracion < 60) return 0.50;

    int horasCompletas = duracion / 60;
    int minutosRestantes = duracion % 60;
    float precio = horasCompletas * 0.75;

    if (minutosRestantes >= 30) {
        precio += 0.50;
    }

    return precio;
}

int validarPlaca(const char *placa) {
    if (strlen(placa) != 7) return 0;
    for (int i = 0; i < 3; i++) {
        if (!isalpha(placa[i])) return 0;
    }
    for (int i = 3; i < 7; i++) {
        if (!isdigit(placa[i])) return 0;
    }
    return 1;
}

int esHoraValida(const char *hora) {
    int h, m;
    if (sscanf(hora, "%d:%d", &h, &m) != 2) return 0;
    if (h < 0 || h > 23 || m < 0 || m > 59) return 0;
    return 1;
}

void registrarIngreso(Vehiculo parqueadero[], int *cantidad) {
    if (*cantidad >= MAX_VEHICULOS) {
        printf("\nEl parqueadero esta lleno.\n");
        return;
    }

    Vehiculo nuevo;
    do {
        printf("\nIngrese la placa (formato ABC1234): ");
        scanf("%s", nuevo.placa);
        convertirAMayusculas(nuevo.placa);
        if (!validarPlaca(nuevo.placa)) {
            printf("Placa invalida. Debe tener 3 letras y 4 numeros.\n");
        }
    } while (!validarPlaca(nuevo.placa));

    printf("Ingrese la marca: ");
    scanf("%s", nuevo.marca);

    printf("Ingrese el color: ");
    scanf("%s", nuevo.color);

    do {
        printf("Ingrese la hora de entrada (hh:mm): ");
        scanf("%5s", nuevo.horaEntrada);
        if (!esHoraValida(nuevo.horaEntrada)) {
            printf("Hora de entrada invalida. Formato correcto HH:MM, rango 00:00 a 23:59.\n");
        }
    } while (!esHoraValida(nuevo.horaEntrada));

    strcpy(nuevo.horaSalida, "");
    nuevo.precioPagado = 0.0;

    parqueadero[*cantidad] = nuevo;
    (*cantidad)++;

    printf("Vehiculo registrado exitosamente.\n");
}

void registrarSalida(Vehiculo parqueadero[], int cantidad) {
    char placa[10];
    printf("\nIngrese la placa del vehiculo que va a salir: ");
    scanf("%s", placa);
    convertirAMayusculas(placa);

    for (int i = 0; i < cantidad; i++) {
        if (strcmp(parqueadero[i].placa, placa) == 0 && parqueadero[i].precioPagado == 0.0) {
            do {
                printf("Ingrese la hora de salida (hh:mm): ");
                scanf("%5s", parqueadero[i].horaSalida);
                if (!esHoraValida(parqueadero[i].horaSalida)) {
                    printf("Hora de salida invalida. Formato correcto HH:MM, rango 00:00 a 23:59.\n");
                }
            } while (!esHoraValida(parqueadero[i].horaSalida));

            int minutosEntrada = convertirHoraAMinutos(parqueadero[i].horaEntrada);
            int minutosSalida = convertirHoraAMinutos(parqueadero[i].horaSalida);

            if (minutosSalida < minutosEntrada) {
                printf("La hora de salida no puede ser anterior a la hora de entrada.\n");
                strcpy(parqueadero[i].horaSalida, "");
                return;
            }

            parqueadero[i].precioPagado = calcularPrecio(parqueadero[i].horaEntrada, parqueadero[i].horaSalida);
            printf("Precio a pagar: $%.2f\n", parqueadero[i].precioPagado);
            return;
        }
    }
    printf("Vehiculo no encontrado o ya salio.\n");
}

void mostrarVehiculos(Vehiculo parqueadero[], int cantidad) {
    printf("\n--- Lista de Vehículos ---\n");
    for (int i = 0; i < cantidad; i++) {
        printf("Placa: %s | Marca: %s | Color: %s | Entrada: %s | Salida: %s | Pagado: $%.2f\n",
               parqueadero[i].placa,
               parqueadero[i].marca,
               parqueadero[i].color,
               parqueadero[i].horaEntrada,
               strcmp(parqueadero[i].horaSalida, "") == 0 ? "--:--" : parqueadero[i].horaSalida,
               parqueadero[i].precioPagado);
    }
}

void buscarVehiculo(Vehiculo parqueadero[], int cantidad) {
    char placa[10];
    printf("\nIngrese la placa a buscar: ");
    scanf("%s", placa);
    convertirAMayusculas(placa);

    for (int i = 0; i < cantidad; i++) {
        if (strcmp(parqueadero[i].placa, placa) == 0) {
            printf("Placa: %s | Marca: %s | Color: %s | Entrada: %s | Salida: %s | Pagado: $%.2f\n",
                   parqueadero[i].placa,
                   parqueadero[i].marca,
                   parqueadero[i].color,
                   parqueadero[i].horaEntrada,
                   strcmp(parqueadero[i].horaSalida, "") == 0 ? "--:--" : parqueadero[i].horaSalida,
                   parqueadero[i].precioPagado);
            return;
        }
    }
    printf("Vehiculo no encontrado.\n");
}

void modificarVehiculo(Vehiculo parqueadero[], int cantidad) {
    char placa[10];
    printf("\nIngrese la placa del vehiculo a modificar: ");
    scanf("%s", placa);
    convertirAMayusculas(placa);

    for (int i = 0; i < cantidad; i++) {
        if (strcmp(parqueadero[i].placa, placa) == 0) {
            printf("Ingrese la nueva marca: ");
            scanf("%s", parqueadero[i].marca);

            printf("Ingrese el nuevo color: ");
            scanf("%s", parqueadero[i].color);

            printf("Vehiculo modificado correctamente.\n");
            return;
        }
    }
    printf("Vehiculo no encontrado.\n");
}

void finalizarDia(Vehiculo parqueadero[], int cantidad) {
    float total = 0.0;

    crearDirectorioResumenes();

    FILE *archivo = fopen("resumenes/resumen_dia.txt", "w");
    if (archivo == NULL) {
        printf("Error al crear el archivo de resumen.\n");
        return;
    }

    fprintf(archivo, "--- RESUMEN DEL DIA ---\n");
    printf("\n--- Cierre del Dia ---\n");

    for (int i = 0; i < cantidad; i++) {
        if (parqueadero[i].precioPagado > 0) {
            fprintf(archivo, "Placa: %s\n", parqueadero[i].placa);
            fprintf(archivo, "Marca: %s\n", parqueadero[i].marca);
            fprintf(archivo, "Color: %s\n", parqueadero[i].color);
            fprintf(archivo, "Hora de entrada: %s\n", parqueadero[i].horaEntrada);
            fprintf(archivo, "Hora de salida: %s\n", parqueadero[i].horaSalida);
            fprintf(archivo, "Precio pagado: $%.2f\n", parqueadero[i].precioPagado);
            fprintf(archivo, "-------------------------\n");

            printf("Placa: %s - Pago: $%.2f\n", parqueadero[i].placa, parqueadero[i].precioPagado);
            total += parqueadero[i].precioPagado;
        }
    }

    fprintf(archivo,"TOTAL RECAUDADO: $%.2f\n", total);
    fclose(archivo);

    printf("Total recaudado: $%.2f\n", total);
    printf("Resumen guardado en: resumenes/resumen_dia.txt\n");

    // Abrir el archivo en Bloc de notas automáticamente (solo Windows)
#ifdef _WIN32
    system("start notepad.exe resumenes\\resumen_dia.txt");
#endif
}

int main() {
    Vehiculo parqueadero[MAX_VEHICULOS];
    int cantidad = 0;
    int opcion;

    do {
        printf("\n--- MENU PARQUEADERO ---\n");
        printf("1. Registrar ingreso de vehiculo\n");
        printf("2. Registrar salida de vehiculo\n");
        printf("3. Mostrar todos los vehiculos\n");
        printf("4. Buscar vehiculo por placa\n");
        printf("5. Modificar datos de vehiculo\n");
        printf("6. Finalizar dia y mostrar resumen\n");
        printf("7. Salir\n");
        printf("Seleccione una opcion: ");
        scanf("%d", &opcion);

        switch (opcion) {
            case 1: registrarIngreso(parqueadero, &cantidad); break;
            case 2: registrarSalida(parqueadero, cantidad); break;
            case 3: mostrarVehiculos(parqueadero, cantidad); break;
            case 4: buscarVehiculo(parqueadero, cantidad); break;
            case 5: modificarVehiculo(parqueadero, cantidad); break;
            case 6: finalizarDia(parqueadero, cantidad); break;
            case 7: printf("Saliendo del sistema...\n"); break;
            default: printf("Opcion invalida. Intente de nuevo.\n");
        }

    } while (opcion != 7);

    return 0;
}
